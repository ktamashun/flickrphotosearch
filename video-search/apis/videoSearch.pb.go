// Code generated by protoc-gen-go. DO NOT EDIT.
// source: videoSearch.proto

package apis

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VideoSearchRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *VideoSearchRequest) Reset()                    { *m = VideoSearchRequest{} }
func (m *VideoSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*VideoSearchRequest) ProtoMessage()               {}
func (*VideoSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *VideoSearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type VideoSearchResponse struct {
	Videos []*VideoSearchResponse_Video `protobuf:"bytes,3,rep,name=videos" json:"videos,omitempty"`
}

func (m *VideoSearchResponse) Reset()                    { *m = VideoSearchResponse{} }
func (m *VideoSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*VideoSearchResponse) ProtoMessage()               {}
func (*VideoSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *VideoSearchResponse) GetVideos() []*VideoSearchResponse_Video {
	if m != nil {
		return m.Videos
	}
	return nil
}

type VideoSearchResponse_Video struct {
	ID           string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	ThumbnailUrl string `protobuf:"bytes,2,opt,name=thumbnailUrl" json:"thumbnailUrl,omitempty"`
	Title        string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Url          string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Channel      string `protobuf:"bytes,5,opt,name=channel" json:"channel,omitempty"`
	User         string `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
}

func (m *VideoSearchResponse_Video) Reset()                    { *m = VideoSearchResponse_Video{} }
func (m *VideoSearchResponse_Video) String() string            { return proto.CompactTextString(m) }
func (*VideoSearchResponse_Video) ProtoMessage()               {}
func (*VideoSearchResponse_Video) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

func (m *VideoSearchResponse_Video) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *VideoSearchResponse_Video) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

func (m *VideoSearchResponse_Video) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *VideoSearchResponse_Video) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *VideoSearchResponse_Video) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *VideoSearchResponse_Video) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func init() {
	proto.RegisterType((*VideoSearchRequest)(nil), "flickrphotosearch.VideoSearchRequest")
	proto.RegisterType((*VideoSearchResponse)(nil), "flickrphotosearch.VideoSearchResponse")
	proto.RegisterType((*VideoSearchResponse_Video)(nil), "flickrphotosearch.VideoSearchResponse.Video")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Video service

type VideoClient interface {
	// Search videos
	Search(ctx context.Context, in *VideoSearchRequest, opts ...grpc.CallOption) (*VideoSearchResponse, error)
}

type videoClient struct {
	cc *grpc.ClientConn
}

func NewVideoClient(cc *grpc.ClientConn) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) Search(ctx context.Context, in *VideoSearchRequest, opts ...grpc.CallOption) (*VideoSearchResponse, error) {
	out := new(VideoSearchResponse)
	err := grpc.Invoke(ctx, "/flickrphotosearch.Video/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Video service

type VideoServer interface {
	// Search videos
	Search(context.Context, *VideoSearchRequest) (*VideoSearchResponse, error)
}

func RegisterVideoServer(s *grpc.Server, srv VideoServer) {
	s.RegisterService(&_Video_serviceDesc, srv)
}

func _Video_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flickrphotosearch.Video/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).Search(ctx, req.(*VideoSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Video_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flickrphotosearch.Video",
	HandlerType: (*VideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Video_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "videoSearch.proto",
}

func init() { proto.RegisterFile("videoSearch.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xcd, 0xbf, 0x15, 0x47, 0x11, 0x3b, 0x7a, 0x58, 0x7a, 0x2a, 0x01, 0xa5, 0x88, 0xe4,
	0x50, 0xdf, 0x40, 0x72, 0xe9, 0x35, 0xa2, 0xa0, 0xb7, 0x24, 0x8e, 0x64, 0x71, 0xcd, 0xa6, 0xfb,
	0x47, 0xf0, 0x31, 0x7c, 0x52, 0x5f, 0x41, 0x3a, 0x69, 0x91, 0xa2, 0xa0, 0xb7, 0xf9, 0x7e, 0x33,
	0xc3, 0xf7, 0xed, 0x2c, 0x4c, 0xde, 0xd4, 0x13, 0x99, 0x5b, 0xaa, 0x6d, 0xdb, 0x15, 0x83, 0x35,
	0xde, 0xe0, 0xe4, 0x59, 0xab, 0xf6, 0xc5, 0x0e, 0x9d, 0xf1, 0xc6, 0x71, 0x23, 0xbf, 0x04, 0xbc,
	0xff, 0x9e, 0xab, 0x68, 0x15, 0xc8, 0x79, 0x3c, 0x83, 0x6c, 0x15, 0xc8, 0xbe, 0xcb, 0x68, 0x16,
	0xcd, 0x0f, 0xaa, 0x51, 0xe4, 0x9f, 0x11, 0x9c, 0xee, 0x0c, 0xbb, 0xc1, 0xf4, 0x8e, 0xb0, 0x04,
	0xc1, 0x5e, 0x4e, 0x26, 0xb3, 0x64, 0x7e, 0xb8, 0xb8, 0x2a, 0x7e, 0xf8, 0x14, 0xbf, 0xec, 0x8d,
	0xac, 0xda, 0xec, 0x4e, 0x3f, 0x22, 0xc8, 0x98, 0xe0, 0x31, 0xc4, 0xcb, 0x72, 0x63, 0x1d, 0x2f,
	0x4b, 0xcc, 0xe1, 0xc8, 0x77, 0xe1, 0xb5, 0xe9, 0x6b, 0xa5, 0xef, 0xac, 0x96, 0x31, 0x77, 0x76,
	0xd8, 0x3a, 0xb1, 0x57, 0x5e, 0x93, 0x4c, 0xc6, 0xc4, 0x2c, 0xf0, 0x04, 0x92, 0x60, 0xb5, 0x4c,
	0x99, 0xad, 0x4b, 0x94, 0xb0, 0xdf, 0x76, 0x75, 0xdf, 0x93, 0x96, 0x19, 0xd3, 0xad, 0x44, 0x84,
	0x34, 0x38, 0xb2, 0x52, 0x30, 0xe6, 0x7a, 0xd1, 0x6c, 0x23, 0x3d, 0x80, 0x18, 0xc3, 0xe3, 0xf9,
	0x5f, 0x8f, 0xe3, 0x0b, 0x4e, 0x2f, 0xfe, 0x77, 0x83, 0x7c, 0xef, 0x46, 0x3c, 0xa6, 0xf5, 0xa0,
	0x5c, 0x23, 0xf8, 0x8f, 0xae, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xae, 0xec, 0x04, 0xb8,
	0x01, 0x00, 0x00,
}
